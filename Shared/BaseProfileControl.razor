@using System.Linq.Expressions
@using BlazorBaseProfileCascade.Data

<div class="form-row">
    <div class="form-group col-12">
        <label for="WE-Summary">Profile Summary</label>
        <input @bind="@Value.Summary" type="text" class="form-control" id="WE-Summary" />
    </div>
</div>
<div class="form-row">
    <div class="form-group col-4">
        <label for="WE-EmailAddress">Email Address</label>
        <input type="text" readonly class="form-control-plaintext" id="WE-EmailAddress" value="@Value.EmailAddress">
    </div>
</div>
<div class="form-row">
    <div class="form-group col-4">
        <DynamicListControl @bind-Values="@Value.Expertise" AddItem="@(item => Value.Expertise.Add(item))" RemoveItem="@(item => Value.Expertise.Remove(item))" />
    </div>
    <div class="form-group col-4">
        <DynamicListControl @bind-Values="@Value.Strengths" AddItem="@(item => Value.Strengths.Add(item))" RemoveItem="@(item => Value.Strengths.Remove(item))" />
    </div>
</div>

@code {

    [CascadingParameter]
    protected EditContext EditContext { get; set; }

    [Parameter]
    public CandidateProfileBase Value { get; set; }

    [Parameter]
    public EventCallback<CandidateProfileBase> ValueChanged { get; set; }

    [Parameter]
    public FieldIdentifier FieldIdentifier { get; set; }

    [Parameter]
    public Expression<Func<CandidateProfileBase>> ValueExpression { get; set; }

    protected string AddExpertiseValue { get; set; } = string.Empty;

    protected override Task OnInitializedAsync()
    {
        if (FieldIdentifier.Equals(default))
            FieldIdentifier = FieldIdentifier.Create(ValueExpression);

        return base.OnInitializedAsync();
    }
}
